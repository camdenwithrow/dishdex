package templates

import "github.com/camdenwithrow/dishdex/internal/models"

templ Nav(user *models.User) {
	<nav class="navbar">
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="flex justify-between items-center h-16">
				<div class="flex items-center">
					<a href={ getHomeUrl(loggedIn(user)) } class="flex items-center cursor-pointer text-xl font-bold nav-link">
						<svg class="w-8 h-8 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
							></path>
						</svg>
						DishDex
					</a>
				</div>
				if loggedIn(user) {
					<div class="flex w-full justify-end items-center gap-4">
						<div class="hidden sm:block w-56">
							@Search()
						</div>
						<div class="h-10 flex justify-center items-center text-center  bg-accent text-light font-medium rounded-lg">
							<a
								hx-get="/recipes/new"
								hx-target="#main-content"
								hx-swap="innerHTML"
								class="w-full h-full px-6 py-2 font-medium cursor-pointer"
								hx-push-url="true"
							>
								<div>Add Recipe</div>
							</a>
						</div>
						<!-- Avatar dropdown -->
						<div class="relative">
							<button id="user-menu-button" type="button" class="p-2 flex items-center focus:outline-none cursor-pointer border border-primary rounded-full" onclick="document.getElementById('user-menu-dropdown').classList.toggle('hidden')">
								<!-- User avatar icon -->
								<svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
								</svg>
							</button>
							<div id="user-menu-dropdown" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50 border border-border">
								<div class="px-4 py-2 text-sm text-primary">{ user.Name }</div>
								// <a href="#" class="block px-4 py-2 text-sm text-primary hover:bg-card">Account</a>
								<button
									type="button"
									id="open-onetsp-modal-dropdown"
									class="w-full text-left px-4 py-2 text-sm text-primary cursor-pointer hover:bg-card"
								>
									Import from 1tsp
								</button>
								<form action="/logout" method="POST">
									<button type="submit" class="w-full text-left px-4 py-2 text-sm text-primary cursor-pointer hover:bg-card">Logout</button>
								</form>
							</div>
						</div>
					</div>
				} else {
					<div class="h-10 flex justify-center items-center text-center text-primary font-medium rounded-lg">
						<a
							hx-get="/signin"
							hx-target="#main-content"
							hx-swap="innerHTML"
							hx-push-url="true"
							class="font-medium cursor-pointer"
						>
							<span class="text-lg font-medium">Sign In</span>
						</a>
					</div>
				}
			</div>
		</div>
	</nav>
	<div class="bg-border mx-6 h-0.5"></div>
	if loggedIn(user) {
		<div class="mt-3 mx-6 block sm:hidden ">
			@Search()
		</div>
	}
}

templ SignOutOnlyNav() {
	<nav class="navbar">
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="flex justify-end items-center h-16">
				<form action="/logout" method="POST">
					<button type="submit" class="w-full text-left px-4 py-2 text-sm text-primary cursor-pointer hover:bg-card">Logout</button>
				</form>
			</div>
		</div>
	</nav>
}

templ Search() {
	<div class="relative h-10 px-6 py-2 form-input block w-full rounded-md border border-border sm:text-sm">
		<input
			class="w-full h-full focus:outline-none focus:ring-blue-500 focus:border-blue-500"
			type="search"
			name="query"
			placeholder="Search recipes..."
			hx-post="/recipes/search"
			hx-trigger="input changed delay:500ms, keyup[key=='Enter']"
			hx-target="#main-content"
			hx-indicator="#search-loading"
		/>
		<div id="search-loading" class="htmx-indicator absolute right-4 top-1/2 -translate-y-1/2 w-5 h-5 z-10 pointer-events-none flex items-center justify-center">
			<svg class="animate-spin h-5 w-5 text-accent" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
				<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
				<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
			</svg>
		</div>
	</div>
}

templ RecipeCard(recipe *models.Recipe) {
	<div
		class="rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 overflow-hidden bg-card recipe-card text-sm"
		id={ "recipe-" + recipe.ID }
	>
		<a
			hx-get={ templ.SafeURL("/recipes/" + recipe.ID) }
			hx-target="#main-content"
			hx-swap="innerHTML"
			class="cursor-pointer"
			hx-push-url="true"
		>
			<img src={ getPhoto(recipe.PhotoURL) } alt="Recipe photo" class="w-full h-32 object-cover"/>
			<div class="p-4">
				<h3 class="text-primary font-semibold mb-1 text-text-primary line-clamp-1">{ recipe.Title }</h3>
				<p class="text-xs mb-2 line-clamp-2 text-secondary">{ recipe.Description }</p>
				if recipe.CookTime != "" {
					<div class="flex items-center text-xs text-accent">
						<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
							></path>
						</svg>
						{ recipe.CookTime }
					</div>
				}
			</div>
		</a>
	</div>
}

templ RecipeFormFields(title, description, cookTime, servings, ingredients, instructions, photoUrl string) {
	<div class="mb-3">
		<label for="title" class="block text-sm font-medium text-primary mb-1">Recipe Title</label>
		<input
			type="text"
			id="title"
			name="title"
			value={ title }
			required
			class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary"
			placeholder="Enter recipe title"
		/>
	</div>
	<div class="mb-3">
		<label for="description" class="block text-sm font-medium text-primary mb-1">Description</label>
		<textarea
			id="description"
			name="description"
			rows="2"
			class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary resize-none"
			placeholder="Brief description of your recipe"
		>{ description }</textarea>
	</div>
	<div class="mb-3">
		<label for="photoUrl" class="block text-sm font-medium text-primary mb-1">Photo URL</label>
		<input
			type="url"
			id="photoUrl"
			name="photoUrl"
			value={ photoUrl }
			class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary"
			placeholder="https://example.com/recipe-photo.jpg"
		/>
		<p class="text-xs text-secondary mt-1">Paste a URL to an image of your recipe</p>
	</div>
	<div class="grid grid-cols-1 md:grid-cols-2 gap-3 md:gap-4 mb-3">
		<div>
			<label for="cookTime" class="block text-sm font-medium text-primary mb-1">Cook Time</label>
			<input
				type="text"
				id="cookTime"
				name="cookTime"
				value={ cookTime }
				class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary"
				placeholder="e.g., 30 minutes"
			/>
		</div>
		<div>
			<label for="servings" class="block text-sm font-medium text-primary mb-1">Servings</label>
			<input
				type="number"
				id="servings"
				name="servings"
				value={ servings }
				min="1"
				class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary"
				placeholder="4"
			/>
		</div>
	</div>
	<div class="mb-3">
		<label for="ingredients" class="block text-sm font-medium text-primary mb-1">Ingredients</label>
		<textarea
			id="ingredients"
			name="ingredients"
			rows="4"
			required
			class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary resize-none"
			placeholder="List ingredients, one per line:
2 cups flour
1 cup sugar
3 eggs"
		>{ ingredients }</textarea>
	</div>
	<div class="mb-3">
		<label for="instructions" class="block text-sm font-medium text-primary mb-1">Instructions</label>
		<div id="instructions-steps"></div>
		<input type="hidden" id="instructions" name="instructions" value={ instructions } required/>
	</div>
}

templ InstructionSteps() {
	<script>
	document.addEventListener('DOMContentLoaded', initializeInstructionSteps)
	document.body.addEventListener('htmx:afterSwap', initializeInstructionSteps)
	function initializeInstructionSteps() {
		// Only run on AddRecipe or EditRecipe pages by checking for the form
		const stepsContainer = document.getElementById('instructions-steps');
		const hiddenInput = document.getElementById('instructions');
		if (!stepsContainer || !hiddenInput) return;

		let steps = [];
		if (hiddenInput && hiddenInput.value.trim() !== '') {
			steps = hiddenInput.value.split('\n');
		} else {
			steps = [''];
		}

		function renderSteps() {
			stepsContainer.innerHTML = '';
			steps.forEach((step, idx) => {
				const wrapper = document.createElement('div');
				wrapper.className = 'flex items-center mb-2';

				const number = document.createElement('div');
				number.className = 'w-6 h-6 pb-0.5 bg-primary text-white rounded-full flex items-center justify-center text-sm font-medium mr-3 flex-shrink-0 leading-none';
				number.textContent = idx + 1;

				const input = document.createElement('input');
				input.type = 'text';
				input.className = 'flex-1 px-3 py-2 border border-border rounded focus:outline-none focus:ring-2 focus:ring-primary bg-card text-primary placeholder-secondary';
				input.placeholder = `Step ${idx + 1}`;
				input.value = step;
				input.dataset.idx = idx;

				input.addEventListener('keydown', function (e) {
					if (e.key === 'Enter') {
						e.preventDefault();
						if (idx === steps.length - 1 && input.value.trim() !== '') {
							steps.push('');
							renderSteps();
							setTimeout(() => {
								stepsContainer.querySelectorAll('input')[idx + 1].focus();
							}, 0);
						}
					}
					// Optional: handle "Backspace" to remove empty step
					if (e.key === 'Backspace' && input.value === '' && steps.length > 1) {
						steps.splice(idx, 1);
						renderSteps();
						setTimeout(() => {
							stepsContainer.querySelectorAll('input')[Math.max(0, idx - 1)].focus();
						}, 0);
					}
				});

				input.addEventListener('input', function (e) {
					steps[idx] = input.value;
					updateHiddenInput();
				});

				wrapper.appendChild(number);
				wrapper.appendChild(input);
				stepsContainer.appendChild(wrapper);
			});
			// Add info text below the last step input
			const info = document.createElement('div');
			info.className = 'text-xs text-primary/65 mt-1 ml-10';
			info.textContent = 'Press [enter] to add another step';
			stepsContainer.appendChild(info);
			updateHiddenInput();
		}

		function updateHiddenInput() {
			hiddenInput.value = steps.filter(s => s.trim() !== '').join('\n');
		}

		renderSteps();
	};
</script>
}

templ ImportFromUrlDialog() {
	@dialog() {
		<style>
			.htmx-request .hide-during-request {
				display: none !important;
			}
		</style>
		<div class="flex justify-between items-center mb-4">
			<h2 class="text-2xl font-bold text-primary">Import Recipe from URL</h2>
			<div class="pb-1">
				<button
					onclick="closeModal()"
					class="cursor-pointer text-3xl text-secondary hover:text-primary focus:outline-none"
				>
					&times;
				</button>
			</div>
		</div>
		<form
			hx-post="/recipes/new/url"
			hx-target="#main-content"
			hx-trigger="submit"
			hx-swap="innerHTML"
			hx-on::after-request="closeModal()"
			class="space-y-4"
		>
			<input
				type="url"
				id="modal-import-url"
				name="url"
				required
				class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
				placeholder="Paste recipe URL"
			/>
			<div id="import-url-error" class="text-red-600 text-sm mb-2"></div>
			<button
				type="submit"
				id="import-btn"
				class="cursor-pointer w-full bg-accent text-light px-6 py-3 rounded-lg font-medium hover:bg-primary/90 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 flex items-center justify-center"
			>
				<span id="import-btn-text" class="hide-during-request">Import</span>
				<span id="import-loading" class="htmx-indicator hidden">
					<svg class="animate-spin h-5 w-5 text-light" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
						<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
						<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
					</svg>
				</span>
			</button>
		</form>
	}
}

templ dialog() {
	<div id="dialog" class="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm">
		<div class="bg-card rounded-lg shadow-lg p-8 w-full max-w-md mx-auto relative">
			{ children... }
		</div>
	</div>
}

templ dialogPlaceholder() {
	<div id="dialog" class="hidden fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm"></div>
}

// Success message template for HTMX responses
templ SuccessMessage(message string) {
	<div class="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50" id="success-message">
		<div class="flex items-center">
			<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
			</svg>
			{ message }
		</div>
	</div>
	<script>
	setTimeout(() => {
		const message = document.getElementById('success-message');
		if (message) {
			message.remove();
		}
	}, 3000);
</script>
}

// Loading indicator template
templ LoadingIndicator() {
	<div class="flex items-center justify-center py-8">
		<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
		<span class="ml-2 text-secondary">Loading...</span>
	</div>
}

// Error message template
templ ErrorMessage(message string) {
	<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
		<div class="flex items-center">
			<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
				></path>
			</svg>
			{ message }
		</div>
	</div>
}

// Helper functions
func loggedIn(user *models.User) bool {
	return user != nil
}

func getHomeUrl(loggedIn bool) string {
	if loggedIn {
		return "/recipes"
	}
	return "/"
}

func getPhoto(photoUrl string) string {
	if photoUrl != "" {
		return photoUrl
	}
	return "/static/imgs/placeholder.webp"
}
