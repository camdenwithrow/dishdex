package templates

import "github.com/camdenwithrow/dishdex/internal/models"

type NavConfig struct {
	Search          bool
	AddRecipeButton bool
	ProfileAvatar   bool
}

templ LoggedOutNav() {
	@Nav(nil, NavConfig{})
}

templ Nav(user *models.User, navConfig NavConfig) {
	<nav class="navbar">
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="flex justify-between items-center h-16">
				<div class="flex items-center">
					<a
						href={ getHomeUrl(loggedIn(user)) }
						class="flex items-center cursor-pointer text-xl font-bold nav-link"
					>
						<svg class="w-8 h-8 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
							></path>
						</svg>
						DishDex
					</a>
				</div>
				if loggedIn(user) {
					<div class="flex w-full justify-end items-center gap-4">
						if navConfig.Search {
							@NavSearch()
						}
						if navConfig.AddRecipeButton {
							@AddRecipeButton()
						}
						if navConfig.ProfileAvatar {
							@AvatarProfileDropdown(user)
						}
						//<div class="w-full text-sm text-primary text-left cursor-pointer hover:bg-card">
						// <button onclick="closeUserDropdown();showGrocerySidebar()"
						class="cursor-pointer text-left w-full h-full px-4 py-2 block">
						// Grocery List
						// </button>
						//</div>
						// <a href="#" class="block px-4 py-2 text-sm text-primary hover:bg-card">Account</a>
						// <button // type="button" // id="open-onetsp-modal-dropdown" //
						class="w-full text-left px-4 py-2 text-sm text-primary cursor-pointer hover:bg-card" //
						hx-get="/recipes/onetsp/login" // hx-target="#dialog" // hx-swap="outerHTML" / />
						// Import from 1tsp
						// </button>
					</div>
				} else {
					<div class="h-10 flex justify-center items-center text-center text-primary font-medium rounded-lg">
						<a
							hx-get="/signin"
							hx-target="#page"
							hx-swap="innerHTML"
							hx-push-url="true"
							class="font-medium cursor-pointer"
						>
							<span class="text-lg font-medium">Sign In</span>
						</a>
					</div>
				}
			</div>
		</div>
	</nav>
	<div class="bg-border mx-6 h-0.5"></div>
	if navConfig.Search && loggedIn(user) {
		@MobileSearch()
	}
	<script>
		function closeUserDropdown() {
			document.getElementById('user-menu-dropdown').classList.toggle('hidden')
		}
	</script>
}

templ SignOutOnlyNav() {
	<nav class="navbar">
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="flex justify-end items-center h-16">
				<form action="/logout" method="POST">
					<button
						type="submit"
						class="w-full text-left px-4 py-2 text-sm text-primary cursor-pointer hover:bg-card"
					>Logout</button>
				</form>
			</div>
		</div>
	</nav>
}

var SearchHandle = templ.NewOnceHandle()

templ NavSearch() {
	<div class="hidden sm:block w-56">
		@Search()
	</div>
}

templ MobileSearch() {
	<div class="mt-3 mx-6 block sm:hidden ">
		@Search()
	</div>
}

templ Search() {
	<div class="relative h-10 px-6 py-2 form-input block w-full rounded-md border border-border sm:text-sm">
		<input
			id="search-bar"
			class="w-full h-full focus:outline-none focus:ring-blue-500 focus:border-blue-500"
			type="search"
			name="query"
			placeholder="Search recipes..."
			hx-post="/recipes/search"
			hx-trigger="input changed delay:500ms, keyup[key=='Enter']"
			hx-target="#page"
			hx-indicator="#search-loading"
		/>
		<div class="absolute right-2 top-1/2 -translate-y-1/2 flex justify-end items-center z-10">
			<div id="search-loading" class="htmx-indicator w-5 h-5 pointer-events-none flex items-center justify-center">
				<svg
					class="animate-spin h-5 w-5 text-accent"
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
				>
					<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
					<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
				</svg>
			</div>
			<div id="clear-search" class="hidden w-5 h-5 z-10 flex items-center justify-center">
				<button
					type="button"
					id="clear-search-btn"
					class="cursor-pointer w-full h-full text-lg mb-3"
					hx-post="/recipes/search"
					hx-target="#page"
					hx-swap="innerHTML"
					hx-vals='{"query": ""}'
					hx-indicator="#search-loading"
					hx-on::before-request="clearSearch()"
					hx-on::after-request="toggleClearSearchButton()"
				>
					&times;
				</button>
			</div>
		</div>
		@SearchHandle.Once() {
			<script>
		const searchBarEl = document.getElementById("search-bar");
		const clearSearchButton = document.getElementById("clear-search");
		function clearSearch() {
			searchBarEl.value = ""
			clearSearchButton.classList.add("hidden");
		}
		function toggleClearSearchButton() {
			if (!searchBarEl || !clearSearchButton) return;
			if (searchBarEl.value !== "") {
				clearSearchButton.classList.remove("hidden");
			} else {
				clearSearchButton.classList.add("hidden");
			}
		}
		searchBarEl.addEventListener("input", toggleClearSearchButton);
		toggleClearSearchButton();
	</script>
		}
	</div>
}

templ RecipeCard(recipe *models.Recipe) {
	<div
		class="rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 overflow-hidden bg-card recipe-card text-sm"
		id={ "recipe-" + recipe.ID }
	>
		<a
			hx-get={ templ.SafeURL("/recipes/" + recipe.ID) }
			hx-target="#page"
			hx-swap="innerHTML"
			class="cursor-pointer"
			hx-push-url="true"
		>
			<img src={ getPhoto(recipe.PhotoURL) } alt="Recipe photo" class="w-full h-32 object-cover"/>
			<div class="p-4">
				<h3 class="text-primary font-semibold mb-1 text-text-primary line-clamp-1">{ recipe.Title }</h3>
				<p class="text-xs mb-2 line-clamp-2 text-secondary">{ recipe.Description }</p>
				if recipe.CookTime != "" {
					<div class="flex items-center text-xs text-accent">
						<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
							></path>
						</svg>
						{ recipe.CookTime }
					</div>
				}
				if recipe.Tags != "" {
					<div class="flex items-center text-xs text-secondary mt-1">
						<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"
							></path>
						</svg>
						<span class="line-clamp-1">{ recipe.Tags }</span>
					</div>
				}
			</div>
		</a>
	</div>
}

templ RecipeFormFields(title, description, cookTime, servings, ingredients, instructions, photoUrl, tags string) {
	<div class="mb-3">
		<label for="title" class="block text-sm font-medium text-primary mb-1">Recipe Title</label>
		<input
			type="text"
			id="title"
			name="title"
			value={ title }
			required
			class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary"
			placeholder="Enter recipe title"
		/>
	</div>
	<div class="mb-3">
		<label for="description" class="block text-sm font-medium text-primary mb-1">Description</label>
		<textarea
			id="description"
			name="description"
			rows="1"
			class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary resize-none"
			placeholder="Brief description of your recipe"
		>{ description }</textarea>
	</div>
	<div class="mb-3 hidden">
		<label for="photoUrl" class="block text-sm font-medium text-primary mb-1">Photo URL</label>
		<input
			type="url"
			id="photoUrl"
			name="photoUrl"
			value={ photoUrl }
			class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary"
			placeholder="https://example.com/recipe-photo.jpg"
		/>
		<p class="text-xs text-secondary mt-1">Paste a URL to an image of your recipe</p>
	</div>
	<div class="grid grid-cols-1 md:grid-cols-2 gap-3 md:gap-4 mb-3">
		<div>
			<label for="cookTime" class="block text-sm font-medium text-primary mb-1">Cook Time</label>
			<input
				type="text"
				id="cookTime"
				name="cookTime"
				value={ cookTime }
				class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary"
				placeholder="e.g., 30 minutes"
			/>
		</div>
		<div>
			<label for="servings" class="block text-sm font-medium text-primary mb-1">Servings</label>
			<input
				type="number"
				id="servings"
				name="servings"
				value={ servings }
				min="1"
				class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary"
				placeholder="4"
			/>
		</div>
	</div>
	<div class="mb-3">
		<label for="ingredients" class="block text-sm font-medium text-primary mb-1">Ingredients</label>
		<textarea
			id="ingredients"
			name="ingredients"
			rows="4"
			required
			class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary resize-none"
			placeholder="List ingredients, one per line:
2 cups flour
1 cup sugar
3 eggs"
		>{ ingredients }</textarea>
	</div>
	<div class="mb-3">
		<label for="instructions" class="block text-sm font-medium text-primary mb-1">Instructions</label>
		<div id="instructions-steps"></div>
		<input type="hidden" id="instructions" name="instructions" value={ instructions } required/>
	</div>
	<div class="mb-3 hidden">
		<label for="tags" class="block text-sm font-medium text-primary mb-1">Tags</label>
		<input
			type="text"
			id="tags"
			name="tags"
			value={ tags }
			class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary"
			placeholder="e.g., dessert, chocolate, pie"
		/>
		<p class="text-xs text-secondary mt-1">Separate tags with commas</p>
	</div>
}

templ InstructionSteps() {
	<script>
	document.addEventListener('DOMContentLoaded', initializeInstructionSteps)
	document.body.addEventListener('htmx:afterSwap', initializeInstructionSteps)
	function initializeInstructionSteps() {
		// Only run on AddRecipe or EditRecipe pages by checking for the form
		const stepsContainer = document.getElementById('instructions-steps');
		const hiddenInput = document.getElementById('instructions');
		if (!stepsContainer || !hiddenInput) return;

		let steps = [];
		if (hiddenInput && hiddenInput.value.trim() !== '') {
			steps = hiddenInput.value.split('\n');
		} else {
			steps = [''];
		}

		function renderSteps() {
			stepsContainer.innerHTML = '';
			steps.forEach((step, idx) => {
				const wrapper = document.createElement('div');
				wrapper.className = 'flex items-center mb-2';

				const number = document.createElement('div');
				number.className = 'w-6 h-6 pb-0.5 bg-primary text-white rounded-full flex items-center justify-center text-sm font-medium mr-3 flex-shrink-0 leading-none';
				number.textContent = idx + 1;

				const input = document.createElement('input');
				input.type = 'text';
				input.className = 'flex-1 px-3 py-2 border border-border rounded focus:outline-none focus:ring-2 focus:ring-primary bg-card text-primary placeholder-secondary';
				input.placeholder = `Step ${idx + 1}`;
				input.value = step;
				input.dataset.idx = idx;

				input.addEventListener('keydown', function (e) {
					if (e.key === 'Enter') {
						e.preventDefault();
						if (idx === steps.length - 1 && input.value.trim() !== '') {
							steps.push('');
							renderSteps();
							setTimeout(() => {
								stepsContainer.querySelectorAll('input')[idx + 1].focus();
							}, 0);
						}
					}
					// Optional: handle "Backspace" to remove empty step
					if (e.key === 'Backspace' && input.value === '' && steps.length > 1) {
						steps.splice(idx, 1);
						renderSteps();
						setTimeout(() => {
							stepsContainer.querySelectorAll('input')[Math.max(0, idx - 1)].focus();
						}, 0);
					}
				});

				input.addEventListener('input', function (e) {
					steps[idx] = input.value;
					updateHiddenInput();
				});

				wrapper.appendChild(number);
				wrapper.appendChild(input);
				stepsContainer.appendChild(wrapper);
			});
			// Add info text below the last step input
			const info = document.createElement('div');
			info.className = 'text-xs text-primary/65 mt-1 ml-10';
			info.textContent = 'Press [enter] to add another step';
			stepsContainer.appendChild(info);
			updateHiddenInput();
		}

		function updateHiddenInput() {
			hiddenInput.value = steps.filter(s => s.trim() !== '').join('\n');
		}

		renderSteps();
	};
</script>
}

templ ImportFromUrlDialog() {
	@dialog() {
		<style>
	.htmx-request .hide-during-request {
		display: none !important;
	}
</style>
		<div class="flex justify-between items-center mb-4">
			<h2 class="text-2xl font-bold text-primary">Import Recipe from URL</h2>
			<div class="pb-1">
				<button
					onclick="closeModal()"
					class="cursor-pointer text-3xl text-secondary hover:text-primary focus:outline-none"
				>
					&times;
				</button>
			</div>
		</div>
		<form
			hx-post="/recipes/new/url"
			hx-target="#page"
			hx-trigger="submit"
			hx-swap="innerHTML"
			hx-on::after-request="closeModal()"
			class="space-y-4"
		>
			<input
				type="url"
				id="modal-import-url"
				name="url"
				required
				class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
				placeholder="Paste recipe URL"
			/>
			<div id="import-url-error" class="text-red-600 text-sm mb-2"></div>
			<button
				type="submit"
				id="import-btn"
				class="cursor-pointer w-full bg-accent text-light px-6 py-3 rounded-lg font-medium hover:bg-primary/90 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 flex items-center justify-center"
			>
				<span id="import-btn-text" class="hide-during-request">Import</span>
				<span id="import-loading" class="htmx-indicator hidden">
					<svg
						class="animate-spin h-5 w-5 text-light"
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 24 24"
					>
						<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
						<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
					</svg>
				</span>
			</button>
		</form>
	}
}

templ OneTspLoginDialog() {
	<div id="dialog" class="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm">
		<div class="bg-white rounded-lg shadow-lg w-full max-w-md mx-auto relative">
			<style>
			.htmx-request .hide-during-request {
				display: none !important;
			}
		</style>
			<!-- OneTsp Banner with Logo -->
			<div class="mb-6 bg-[#07274A] px-8 py-4 flex justify-between items-center">
				<div class="flex items-center justify-center">
					<img
						src="https://onetsp.com/images/logo.png"
						alt="OneTsp Logo"
						class="h-8 w-auto"
						onerror="this.style.display='none'"
					/>
				</div>
				<div class="pb-1">
					<button
						onclick="closeModal()"
						class="cursor-pointer text-3xl text-light hover:text-white focus:outline-none"
					>
						&times;
					</button>
				</div>
			</div>
			<div class="px-8 pb-8">
				<form
					hx-post="recipes/onetsp/login"
					hx-target="#dialog"
					hx-trigger="submit"
					hx-swap="outerHTML"
					class="space-y-4"
				>
					<div>
						<label for="onetsp-email" class="block text-sm font-medium text-secondary mb-2">
							Email Address
						</label>
						<input
							type="email"
							id="onetsp-email"
							name="email"
							required
							class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
							placeholder="me@example.com"
						/>
					</div>
					<div>
						<label for="onetsp-password" class="block text-sm font-medium text-secondary mb-2">
							Password
						</label>
						<input
							type="password"
							id="onetsp-password"
							name="password"
							required
							class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
							placeholder="**********"
						/>
					</div>
					<div id="onetsp-login-error" class="text-red-600 text-sm mb-2"></div>
					<button
						type="submit"
						id="onetsp-login-btn"
						class="cursor-pointer w-full bg-[#07274A]/80 text-light px-6 py-3 rounded-lg font-medium hover:bg-[#07274A] transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 flex items-center justify-center"
					>
						<span id="onetsp-login-btn-text" class="hide-during-request">Connect OneTsp</span>
						<span id="onetsp-login-loading" class="htmx-indicator hidden">
							<svg
								class="animate-spin h-5 w-5 text-light"
								xmlns="http://www.w3.org/2000/svg"
								fill="none"
								viewBox="0 0 24 24"
							>
								<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
								<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
							</svg>
						</span>
					</button>
				</form>
			</div>
		</div>
	</div>
}

templ OneTspImportDialog(token string) {
	<div id="dialog" class="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm">
		<div class="bg-white rounded-lg shadow-lg w-full max-w-md mx-auto relative">
			<!-- OneTsp Banner with Logo -->
			<div class="mb-6 bg-[#07274A] px-8 py-4 flex justify-between items-center">
				<div class="flex items-center justify-center">
					<img
						src="https://onetsp.com/images/logo.png"
						alt="OneTsp Logo"
						class="h-8 w-auto"
						onerror="this.style.display='none'"
					/>
				</div>
				<div class="pb-1">
					<button
						onclick="closeModal()"
						class="cursor-pointer text-3xl text-light hover:text-white focus:outline-none"
					>
						&times;
					</button>
				</div>
			</div>
			<form
				class="px-8 pb-8"
				hx-post="/recipes/onetsp/import"
				hx-target="#page"
				hx-trigger="load"
				hx-swap="innerHTML"
				hx-on::after-request="closeModal()"
				class="space-y-4"
			>
				<input type="hidden" name="token" value={ token }/>
				<div class="flex flex-col items-center justify-center py-8">
					<svg
						class="animate-spin h-12 w-12 text-[#07274A] mb-4"
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 24 24"
					>
						<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
						<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
					</svg>
					<span class="text-[#07274A] text-lg font-semibold">Importing from OneTsp...</span>
				</div>
			</form>
		</div>
	</div>
}

templ dialog() {
	<div id="dialog" class="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm">
		<div class="bg-card rounded-lg shadow-lg p-8 w-full max-w-md mx-auto relative">
			{ children... }
		</div>
	</div>
}

templ dialogPlaceholder() {
	<div id="dialog" class="hidden fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm"></div>
}

// Success message template for HTMX responses
templ SuccessMessage(message string) {
	<div class="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50" id="success-message">
		<div class="flex items-center">
			<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
			</svg>
			{ message }
		</div>
	</div>
	<script>
	setTimeout(() => {
		const message = document.getElementById('success-message');
		if (message) {
			message.remove();
		}
	}, 3000);
</script>
}

// Loading indicator template
templ LoadingIndicator() {
	<div class="flex items-center justify-center py-8">
		<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
		<span class="ml-2 text-secondary">Loading...</span>
	</div>
}

// Error message template
templ ErrorMessage(message string) {
	<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
		<div class="flex items-center">
			<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
				></path>
			</svg>
			{ message }
		</div>
	</div>
}

templ AddRecipeButton() {
	<div class="h-10 flex justify-center items-center text-center  bg-accent text-light font-medium rounded-lg">
		<a
			hx-get="/recipes/new"
			hx-target="#page"
			hx-swap="innerHTML"
			class="w-full h-full px-6 py-2 font-medium cursor-pointer"
			hx-push-url="true"
		>
			<div>Add Recipe</div>
		</a>
	</div>
}

templ AvatarProfileDropdown(user *models.User) {
	<!-- Avatar dropdown -->
	<div class="relative">
		<button
			id="user-menu-button"
			type="button"
			class="w-10 h-10 flex items-center justify-center focus:outline-none cursor-pointer border border-primary rounded-full"
			onclick="document.getElementById('user-menu-dropdown').classList.toggle('hidden')"
		>
			<!-- Chef SVG avatar -->
			// <svg class="w-6 h-6" viewBox="0 0 1024 1024" fill="currentColor" version="1.1"
			// 	xmlns="http://www.w3.org/2000/svg">
			// 	<g id="SVGRepo_bgCarrier" stroke-width="0"></g>
			// 	<g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
			// 	<g id="SVGRepo_iconCarrier">
			// 		<path
			// 			d="M822.389086 679.867985m-100.717263 0a100.717263 100.717263 0 1 0 201.434526 0 100.717263 100.717263 0 1 0-201.434526 0Z"
			// 			fill="#481901"></path>
			// 		<path
			// 			d="M211.347504 679.867985m-100.717263 0a100.717263 100.717263 0 1 0 201.434526 0 100.717263 100.717263 0 1 0-201.434526 0Z"
			// 			fill="#481901"></path>
			// 		<path
			// 			d="M525.740586 650.940435m-337.71151 0a337.71151 337.71151 0 1 0 675.42302 0 337.71151 337.71151 0 1 0-675.42302 0Z"
			// 			fill="#481901"></path>
			// 		<path
			// 			d="M424.564716 787.887691l226.058221-4.586075s0.035278 116.909636-107.067213 116.944913c-111.018293 0.035278-118.991008-112.358838-118.991008-112.358838z"
			// 			fill="#FFFFFF"></path>
			// 		<path
			// 			d="M424.564716 787.852413s0.952493 9.419093 3.351362 19.085128h220.131602c2.328315-11.253523 2.575258-23.635925 2.575257-23.635925l-226.058221 4.550797zM543.626279 900.352362c39.546078 0 62.22951-16.545148 74.611913-29.668378l-158.748751-3.421918c15.627933 16.545148 42.19189 33.090295 84.136838 33.090296z"
			// 			fill="#FFFFFF"></path>
			// 		<path
			// 			d="M982.866435 202.351741c0-77.998553-71.260551-141.251111-159.136804-141.251111-41.34523 0-78.880491 14.111-107.173046 37.041376-25.96424-16.36876-57.608158-26.070073-91.897888-26.070073-39.828298 0-76.128846 13.052675-104.033348 34.501395-27.904503-21.44872-64.20505-34.501395-104.033348-34.501395-29.35088 0-56.72622 7.161333-80.326869 19.47318-27.09312-19.014573-61.277018-30.444483-98.49478-30.444483-87.876253 0-159.136804 63.252558-159.136804 141.251111 0 68.261963 54.539015 125.199848 127.069556 138.393634v209.513074h643.24994V341.627313c75.917181-10.759638 133.913391-68.932236 133.913391-139.275572z"
			// 			fill="#481901" stroke="FDF2E2"></path>
			// 	</g>
			// </svg>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-8 h-8" fill="currentColor">
				<path
					d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
				></path>
			</svg>
		</button>
		<div
			id="user-menu-dropdown"
			class="hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50 border border-border"
		>
			<div class="px-4 pt-2 text-sm text-primary font-bold">{ user.Name }</div>
			<div class="px-4 pb-2 text-xs text-primary">{ user.Email }</div>
			<hr/>
			<div class="text-sm w-full text-left text-sm text-primary cursor-pointer hover:bg-card">
				<a
					class="w-full h-full px-4 py-2 block"
					hx-get="/account"
					hx-target="#page"
					hx-swap="innerHTML"
					hx-push-url="true"
					hx-on::after-request="document.getElementById('user-menu-dropdown').classList.toggle('hidden')"
				>
					Account
				</a>
			</div>
			//<div class="w-full text-sm text-primary text-left cursor-pointer hover:bg-card">
			// <button onclick="closeUserDropdown();showGrocerySidebar()"
			class="cursor-pointer text-left w-full h-full px-4 py-2 block">
			// Grocery List
			// </button>
			//</div>
			// <a href="#" class="block px-4 py-2 text-sm text-primary hover:bg-card">Account</a>
			// <button // type="button" // id="open-onetsp-modal-dropdown" //
			class="w-full text-left px-4 py-2 text-sm text-primary cursor-pointer hover:bg-card" //
			hx-get="/recipes/onetsp/login" // hx-target="#dialog" // hx-swap="outerHTML" / />
			// Import from 1tsp
			// </button>
			<form action="/logout" method="POST">
				<button
					type="submit"
					class="w-full text-left px-4 py-2 text-sm text-primary cursor-pointer hover:bg-card"
				>Logout</button>
			</form>
		</div>
	</div>
}

// Helper functions
func loggedIn(user *models.User) bool {
	return user != nil
}

func getHomeUrl(loggedIn bool) string {
	if loggedIn {
		return "/recipes"
	}
	return "/"
}

func getPhoto(photoUrl string) string {
	if photoUrl != "" {
		return photoUrl
	}
	return "/static/imgs/placeholder.webp"
}

templ GroceryListSidebar() {
	<div
		id="grocery-sidebar"
		class="fixed right-0 top-0 h-full w-full sm:w-96 bg-card border-l border-border shadow-xl z-40 flex flex-col"
	>
		<div class="flex items-center justify-between px-6 py-4 border-b border-border">
			<h2 class="text-xl font-bold text-primary">Grocery List</h2>
			<button
				onclick="closeGrocerySidebar()"
				class="text-2xl text-secondary cursor-pointer hover:text-primary"
			>&times;</button>
		</div>
		<div
			id="grocery-list-content"
			class="flex-1 overflow-y-auto px-6 py-4"
			hx-get="/grocery-list"
			hx-trigger="load, groceryListChanged from:body"
			hx-target="#grocery-list-content"
			hx-swap="innerHTML"
		>
			<div class="text-secondary text-sm">Loading...</div>
		</div>
		<div class="p-4 border-t border-border">
			<form
				id="grocery-add-form"
				hx-post="/grocery-list/item"
				hx-target="#grocery-list-content"
				hx-swap="innerHTML"
				hx-on::after-request="document.body.dispatchEvent(new CustomEvent('groceryListChanged'))"
			>
				<div class="flex gap-2">
					<input
						name="name"
						type="text"
						placeholder="Add item..."
						class="flex-1 px-3 py-2 border border-border rounded focus:outline-none focus:ring-2 focus:ring-primary bg-card text-primary placeholder-secondary"
						required
					/>
					<button
						type="submit"
						class="bg-accent text-light px-4 py-2 rounded font-medium hover:bg-primary transition-colors"
					>Add</button>
				</div>
			</form>
		</div>
	</div>
	<script>
	// Show sidebar function (can be called from anywhere)
	function showGrocerySidebar() {
		document.getElementById('grocery-sidebar').classList.remove('hidden');
	}
	function closeGrocerySidebar() {
		document.getElementById('grocery-sidebar').classList.add('hidden')
	}
</script>
}

templ GroceryListContent(list models.GroceryList) {
	if len(list.Items) == 0 {
		<div class="text-secondary text-sm">Your grocery list is empty.</div>
	} else {
		<ul class="space-y-2">
			for _, item := range list.Items {
				<li class="flex items-center gap-2 group">
					<form
						hx-put={ "/grocery-list/item/" + item.ID + "/toggle" }
						hx-target="#grocery-list-content"
						hx-swap="innerHTML"
						hx-on::after-request="document.body.dispatchEvent(new CustomEvent('groceryListChanged'))"
						class="inline"
					>
						<button
							type="submit"
							class="w-5 h-5 border rounded flex items-center justify-center mr-2"
							aria-label="Toggle"
						>
							<span
								class={ func() string { if item.Checked { return "inline-block w-3 h-3 rounded bg-primary" } else
					{ return "inline-block w-3 h-3 rounded border border-border" } }() }
							></span>
						</button>
					</form>
					<span
						class={ func() string { if item.Checked { return "flex-1 line-through text-secondary" } else {
			return "flex-1" } }() }
					>{ item.Name }</span>
					<form
						hx-delete={ "/grocery-list/item/" + item.ID }
						hx-target="#grocery-list-content"
						hx-swap="innerHTML"
						hx-on::after-request="document.body.dispatchEvent(new CustomEvent('groceryListChanged'))"
						class="inline"
					>
						<button type="submit" class="text-red-500 hover:text-red-700 ml-2" aria-label="Remove">&times;</button>
					</form>
				</li>
			}
		</ul>
	}
}

templ OpenGroceryListButton() {
	<div class="absolute bottom-8 right-8 z-10 shadow-lg rounded-full">
		<button
			onclick="window.showGrocerySidebar()"
			class="h-12 w-12 p-2 flex items-center justify-center rounded-full bg-base  border-2 border-primary cursor-pointer"
			title="Open Grocery List"
		>
			// <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			// <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
			d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13l-1.35 2.7A2 2 0 007.48 19h8.98a2 2 0 001.83-1.3L21 13M7 13V6h13">
			// </path>
			// </svg>
			<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
				<g id="SVGRepo_bgCarrier" stroke-width="0"></g>
				<g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
				<g id="SVGRepo_iconCarrier">
					<path
						fill-rule="evenodd"
						clip-rule="evenodd"
						d="M2.24896 2.29245C1.8582 2.15506 1.43005 2.36047 1.29266 2.75123C1.15527 3.142 1.36068 3.57015 1.75145 3.70754L2.01266 3.79937C2.68026 4.03409 3.11902 4.18964 3.44186 4.34805C3.74509 4.49683 3.87876 4.61726 3.96682 4.74612C4.05708 4.87821 4.12678 5.05963 4.16611 5.42298C4.20726 5.80319 4.20828 6.2984 4.20828 7.03835V9.75999C4.20828 11.2125 4.22191 12.2599 4.35897 13.0601C4.50529 13.9144 4.79742 14.526 5.34366 15.1022C5.93752 15.7285 6.69032 16.0012 7.58656 16.1283C8.44479 16.25 9.53464 16.25 10.8804 16.25L16.2861 16.25C17.0278 16.25 17.6518 16.25 18.1568 16.1882C18.6925 16.1227 19.1811 15.9793 19.6076 15.6318C20.0341 15.2842 20.2731 14.8346 20.4455 14.3232C20.6079 13.841 20.7339 13.2299 20.8836 12.5035L21.3925 10.0341L21.3935 10.0295L21.4039 9.97726C21.5686 9.15237 21.7071 8.45848 21.7416 7.90037C21.7777 7.31417 21.711 6.73616 21.3292 6.23977C21.0942 5.93435 20.7639 5.76144 20.4634 5.65586C20.1569 5.54817 19.8103 5.48587 19.4606 5.44677C18.7735 5.36997 17.9389 5.36998 17.1203 5.36999L5.66809 5.36999C5.6648 5.33324 5.66124 5.29709 5.6574 5.26156C5.60367 4.76518 5.48725 4.31246 5.20527 3.89982C4.92109 3.48396 4.54324 3.21762 4.10261 3.00142C3.69052 2.79922 3.16689 2.61514 2.55036 2.39841L2.24896 2.29245ZM5.70828 6.86999H8.30391L9.6938 14.746C8.91096 14.7381 8.29853 14.7143 7.79716 14.6432C7.08235 14.5418 6.70473 14.3576 6.43219 14.0701C6.11202 13.7325 5.93933 13.4018 5.83744 12.8069C5.72628 12.1578 5.70828 11.249 5.70828 9.75999L5.70828 6.86999ZM11.2177 14.75H14.2827L15.6733 6.86999H9.82709L11.2177 14.75ZM15.8059 14.75L17.1965 6.87C18.0085 6.87019 18.7241 6.87379 19.2939 6.93748C19.5895 6.97052 19.8107 7.01642 19.9661 7.07104C20.0931 7.11568 20.1361 7.15213 20.1423 7.1574C20.2037 7.23881 20.2704 7.38651 20.2444 7.80796C20.217 8.25153 20.1005 8.84379 19.9229 9.73372L19.9225 9.73594L19.4237 12.1561C19.2623 12.9389 19.1537 13.4593 19.024 13.8441C18.9009 14.2095 18.7853 14.3669 18.66 14.469C18.5348 14.571 18.3573 14.6525 17.9746 14.6993C17.5714 14.7487 17.0399 14.75 16.2406 14.75H15.8059Z"
						fill="#481901"
					></path>
					<path
						fill-rule="evenodd"
						clip-rule="evenodd"
						d="M7.5002 21.75C6.25756 21.75 5.2502 20.7426 5.2502 19.5C5.2502 18.2573 6.25756 17.25 7.5002 17.25C8.74285 17.25 9.7502 18.2573 9.7502 19.5C9.7502 20.7426 8.74285 21.75 7.5002 21.75ZM6.7502 19.5C6.7502 19.9142 7.08599 20.25 7.5002 20.25C7.91442 20.25 8.2502 19.9142 8.2502 19.5C8.2502 19.0858 7.91442 18.75 7.5002 18.75C7.08599 18.75 6.7502 19.0858 6.7502 19.5Z"
						fill="#481901"
					></path>
					<path
						fill-rule="evenodd"
						clip-rule="evenodd"
						d="M16.5002 21.7501C15.2576 21.7501 14.2502 20.7427 14.2502 19.5001C14.2502 18.2574 15.2576 17.2501 16.5002 17.2501C17.7428 17.2501 18.7502 18.2574 18.7502 19.5001C18.7502 20.7427 17.7428 21.7501 16.5002 21.7501ZM15.7502 19.5001C15.7502 19.9143 16.086 20.2501 16.5002 20.2501C16.9144 20.2501 17.2502 19.9143 17.2502 19.5001C17.2502 19.0859 16.9144 18.7501 16.5002 18.7501C16.086 18.7501 15.7502 19.0859 15.7502 19.5001Z"
						fill="#481901"
					></path>
				</g>
			</svg>
		</button>
	</div>
}
