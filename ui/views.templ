package ui

import (
	"log"
	"strings"
	"time"
)

type User struct {
	ID        string
	Name      string
	Email     string
	AvatarURL string
}

templ Base(content templ.Component, loggedIn bool, user *User) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>DishDex</title>
			<link rel="stylesheet" href="/static/output.css"/>
			<link rel="apple-touch-icon" sizes="180x180" href="/static/favicon/apple-touch-icon.png"/>
			<link rel="icon" type="image/png" sizes="32x32" href="/static/favicon/favicon-32x32.png"/>
			<link rel="icon" type="image/png" sizes="16x16" href="/static/favicon/favicon-16x16.png"/>
			<link rel="manifest" href="/static/favicon/site.webmanifest"/>
			<script src="/static/htmx.min.js"></script>
		</head>
		<body class="min-h-screen bg-base text-primary font-serif">
			<div class="min-h-screen">
				@Nav(loggedIn, user)
				<main class="py-8">
					<div id="main-content" class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
						@content
					</div>
				</main>
			</div>
		</body>
	</html>
}

func getHomeUrl(loggedIn bool) string {
	if loggedIn {
		return "/recipes"
	}
	return "/"
}

templ Search() {
	<div class="relative h-10 px-6 py-2 form-input block w-full rounded-md border border-border sm:text-sm">
		<input
			class="w-full h-full focus:outline-none focus:ring-blue-500 focus:border-blue-500"
			type="search"
			name="search"
			placeholder="Search recipes..."
			hx-post="/recipes/search"
			hx-trigger="input changed delay:500ms, keyup[key=='Enter']"
			hx-target="#main-content"
			hx-indicator="#search-loading"
		/>
		<div id="search-loading" class="htmx-indicator absolute right-4 top-1/2 -translate-y-1/2 w-5 h-5 z-10 pointer-events-none flex items-center justify-center">
			<svg class="animate-spin h-5 w-5 text-accent" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
				<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
				<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
			</svg>
		</div>
	</div>
}

templ Nav(loggedIn bool, user *User) {
	<nav class="navbar">
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="flex justify-between items-center h-16">
				<div class="flex items-center">
					<a href={ getHomeUrl(loggedIn) } class="flex items-center cursor-pointer text-xl font-bold nav-link">
						<svg class="w-8 h-8 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
							></path>
						</svg>
						DishDex
					</a>
				</div>
				if loggedIn {
					<div class="flex w-full justify-end items-center gap-4">
						<div class="hidden sm:block w-56">
							@Search()
						</div>
						<div class="h-10 flex justify-center items-center text-center  bg-accent text-light font-medium rounded-lg">
							<a
								hx-get="/recipes/new"
								hx-target="#main-content"
								hx-swap="innerHTML"
								class="w-full h-full px-6 py-2 font-medium cursor-pointer"
								hx-push-url="true"
							>
								<div>Add Recipe</div>
							</a>
						</div>
						if user != nil {
							<!-- Avatar dropdown -->
							<div class="relative">
								<button id="user-menu-button" type="button" class="p-2 flex items-center focus:outline-none cursor-pointer border border-accent rounded-full" onclick="document.getElementById('user-menu-dropdown').classList.toggle('hidden')">
									<!-- Chef SVG avatar -->
									<svg class="w-6 h-6" viewBox="0 0 1024 1024" fill="currentColor" version="1.1" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><path d="M822.389086 679.867985m-100.717263 0a100.717263 100.717263 0 1 0 201.434526 0 100.717263 100.717263 0 1 0-201.434526 0Z" fill="#FDEDD5"></path><path d="M211.347504 679.867985m-100.717263 0a100.717263 100.717263 0 1 0 201.434526 0 100.717263 100.717263 0 1 0-201.434526 0Z" fill="#FAE1DC"></path><path d="M525.740586 650.940435m-337.71151 0a337.71151 337.71151 0 1 0 675.42302 0 337.71151 337.71151 0 1 0-675.42302 0Z" fill="#FAE1DC"></path><path d="M424.564716 787.887691l226.058221-4.586075s0.035278 116.909636-107.067213 116.944913c-111.018293 0.035278-118.991008-112.358838-118.991008-112.358838z" fill="#FFFFFF"></path><path d="M424.564716 787.852413s0.952493 9.419093 3.351362 19.085128h220.131602c2.328315-11.253523 2.575258-23.635925 2.575257-23.635925l-226.058221 4.550797zM543.626279 900.352362c39.546078 0 62.22951-16.545148 74.611913-29.668378l-158.748751-3.421918c15.627933 16.545148 42.19189 33.090295 84.136838 33.090296z" fill="#FFFFFF"></path><path d="M982.866435 202.351741c0-77.998553-71.260551-141.251111-159.136804-141.251111-41.34523 0-78.880491 14.111-107.173046 37.041376-25.96424-16.36876-57.608158-26.070073-91.897888-26.070073-39.828298 0-76.128846 13.052675-104.033348 34.501395-27.904503-21.44872-64.20505-34.501395-104.033348-34.501395-29.35088 0-56.72622 7.161333-80.326869 19.47318-27.09312-19.014573-61.277018-30.444483-98.49478-30.444483-87.876253 0-159.136804 63.252558-159.136804 141.251111 0 68.261963 54.539015 125.199848 127.069556 138.393634v209.513074h643.24994V341.627313c75.917181-10.759638 133.913391-68.932236 133.913391-139.275572z" fill="#BC6F35"></path></g></svg>
								</button>
								<div id="user-menu-dropdown" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50 border border-border">
									<div class="px-4 py-2 text-sm text-primary">{ user.Name }</div>
									<a href="#" class="block px-4 py-2 text-sm text-primary hover:bg-card">Account</a>
									<form action="/logout" method="POST">
										<button type="submit" class="w-full text-left px-4 py-2 text-sm text-primary cursor-pointer hover:bg-card">Logout</button>
									</form>
								</div>
							</div>
						}
					</div>
				} else {
					<div class="h-10 flex justify-center items-center text-center text-primary font-medium rounded-lg">
						<a
							hx-get="/signin"
							hx-target="#main-content"
							hx-swap="innerHTML"
							hx-push-url="true"
							class="font-medium cursor-pointer"
						>
							<span class="text-lg font-medium">Sign In</span>
						</a>
					</div>
				}
			</div>
		</div>
	</nav>
	<div class="bg-border mx-6 h-0.5"></div>
	if loggedIn {
		<div class="mt-3 mx-6 block sm:hidden ">
			@Search()
		</div>
	}
	<script>
		document.addEventListener('click', function(event) {
			const dropdown = document.getElementById('user-menu-dropdown');
			const button = document.getElementById('user-menu-button');
			if (!dropdown || !button) return;
			if (!dropdown.classList.contains('hidden') && !dropdown.contains(event.target) && !button.contains(event.target)) {
				dropdown.classList.add('hidden');
			}
		});
	</script>
}

templ Home() {
	<div class="max-w-3xl mx-auto text-center py-8 sm:py-20 px-2 sm:px-12">
		<div class="flex flex-col items-center mb-8">
			<h1 class="text-5xl/16 font-extrabold mb-4 text-primary">
				Your personal digital recipe book
			</h1>
		</div>
		<div class=" text-secondary text-md">
			<p>Made with ❤️ for my mom, and anyone who loves to cook.</p>
		</div>
		<div class="mt-16 flex justify-center">
			<a
				hx-get="/signin"
				hx-target="#main-content"
				hx-swap="innerHTML"
				hx-push-url="true"
				class="inline-flex items-center px-8 py-4 bg-accent text-light rounded-lg font-semibold text-lg shadow hover:shadow-lg transition"
			>
				Get Started
			</a>
		</div>
	</div>
}

templ SignInPage(prod bool) {
	<div class="max-w-md mx-auto mt-24 p-8 bg-card rounded-lg shadow-lg text-center">
		<h1 class="text-3xl font-bold mb-6 text-primary">Sign In</h1>
		<div class="space-y-4">
			if !prod {
				<a href="/auth/github" class="inline-flex items-center px-6 py-3 border border-primary text-primary rounded-lg font-medium text-lg hover:shadow-md hover transition w-full justify-center">
					<svg class="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 24 24">
						<path d="M12 0C5.37 0 0 5.37 0 12c0 5.3 3.438 9.8 8.205 11.387.6.113.82-.262.82-.582 0-.288-.012-1.243-.018-2.252-3.338.726-4.042-1.415-4.042-1.415-.546-1.387-1.333-1.756-1.333-1.756-1.09-.745.083-.729.083-.729 1.205.085 1.84 1.237 1.84 1.237 1.07 1.834 2.807 1.304 3.492.997.108-.775.418-1.305.762-1.606-2.665-.304-5.466-1.332-5.466-5.931 0-1.31.469-2.381 1.236-3.221-.124-.303-.535-1.523.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.984-.399 3.003-.404 1.018.005 2.046.138 3.004.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.873.119 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.803 5.625-5.475 5.921.43.371.823 1.102.823 2.222 0 1.606-.015 2.898-.015 3.293 0 .322.218.699.825.58C20.565 21.796 24 17.297 24 12c0-6.63-5.37-12-12-12z"></path>
					</svg>
					Sign in with GitHub
				</a>
			}
			<a href="/auth/google" class="inline-flex items-center px-6 py-3 border border-primary text-primary rounded-lg font-medium text-lg hover:shadow-md hover transition w-full justify-center">
				<svg class="w-6 h-6 mr-3" viewBox="0 0 24 24">
					<path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"></path>
					<path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"></path>
					<path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"></path>
					<path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"></path>
				</svg>
				Sign in with Google
			</a>
		</div>
	</div>
}

type Recipe struct {
	ID          string
	Title       string
	Description string
	CookTime    string
}

templ RecipesList(recipes []Recipe, tags []string, selectedTags []string) {
	<div class="mb-4 ml-1">
		<h2 class="text-xl font-bold">My Recipes</h2>
	</div>
	if len(recipes) == 0 {
		<div class="text-center py-12">
			<div class="mb-4 text-border">
				<svg class="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
					></path>
				</svg>
			</div>
			<p class="mb-4 text-secondary">No recipes found.</p>
			<a
				hx-get="/recipes/new"
				hx-target="#main-content"
				hx-swap="innerHTML"
				hx-push-url="true"
				class="w-full h-full px-6 py-2 font-medium cursor-pointer"
			>
				Add Recipe
			</a>
		</div>
	} else {
		<div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3" id="recipes-grid">
			for _, recipe := range recipes {
				@RecipeCard(recipe)
			}
		</div>
	}
}

templ RecipeCard(recipe Recipe) {
	<div
		class="rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 overflow-hidden bg-card recipe-card"
		id={ "recipe-" + recipe.ID }
	>
		<a
			hx-get={ templ.SafeURL("/recipes/" + recipe.ID) }
			hx-target="#main-content"
			hx-swap="innerHTML"
			class="cursor-pointer"
			hx-push-url="true"
		>
			<div class="p-6">
				<h3 class="text-xl font-semibold mb-2 text-text-primary">{ recipe.Title }</h3>
				<p class="text-sm mb-3 line-clamp-2 text-secondary">{ recipe.Description }</p>
				if recipe.CookTime != "" {
					<div class="flex items-center text-sm text-accent">
						<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
							></path>
						</svg>
						{ recipe.CookTime }
					</div>
				}
			</div>
		</a>
	</div>
}

templ AddRecipe() {
	@InstructionSteps()
	<div class="max-w-2xl mx-auto">
		<div class="mt-4 mb-6">
			<h1 class="text-3xl font-bold text-primary mb-2">Add New Recipe</h1>
			<p class="text-secondary">Share your favorite recipe with the community</p>
		</div>
		<form hx-post="/recipes" hx-target="#main-content" hx-swap="innerHTML" class="space-y-6" hx-push-url="true">
			<div class="mb-3">
				<label for="title" class="block text-sm font-medium text-primary mb-1">Recipe Title</label>
				<input
					type="text"
					id="title"
					name="title"
					required
					class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary"
					placeholder="Enter recipe title"
				/>
			</div>
			<div class="mb-3">
				<label for="description" class="block text-sm font-medium text-primary mb-1">Description</label>
				<textarea
					id="description"
					name="description"
					rows="2"
					class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary resize-none"
					placeholder="Brief description of your recipe"
				></textarea>
			</div>
			<div class="grid grid-cols-1 md:grid-cols-2 gap-3 md:gap-4 mb-3">
				<div>
					<label for="cookTime" class="block text-sm font-medium text-primary mb-1">Cook Time</label>
					<input
						type="text"
						id="cookTime"
						name="cookTime"
						class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary"
						placeholder="e.g., 30 minutes"
					/>
				</div>
				<div>
					<label for="servings" class="block text-sm font-medium text-primary mb-1">Servings</label>
					<input
						type="number"
						id="servings"
						name="servings"
						min="1"
						class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary"
						placeholder="4"
					/>
				</div>
			</div>
			<div class="mb-3">
				<label for="ingredients" class="block text-sm font-medium text-primary mb-1">Ingredients</label>
				<textarea
					id="ingredients"
					name="ingredients"
					rows="4"
					required
					class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary resize-none"
					placeholder="List ingredients, one per line:
2 cups flour
1 cup sugar
3 eggs"
				></textarea>
			</div>
			<div class="mb-3">
				<label for="instructions" class="block text-sm font-medium text-primary mb-1">Instructions</label>
				<div id="instructions-steps"></div>
				<input type="hidden" id="instructions" name="instructions" required/>
			</div>
			<div class="flex gap-4 pt-3">
				<a
					hx-get="/recipes"
					hx-target="#main-content"
					hx-swap="innerHTML"
					hx-push-url="true"
					class="flex-1 border border-border cursor-pointer text-primary px-7 py-3 rounded-lg font-medium transition-colors duration-200 text-center hover:bg-card focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2"
				>
					Cancel
				</a>
				<button
					type="submit"
					class="flex-1 bg-accent cursor-pointer text-light px-6 py-3 rounded-lg font-medium hover:bg-primary/90 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
				>
					Save Recipe
				</button>
			</div>
		</form>
	</div>
}

templ EditRecipe(recipe RecipeDetail) {
	@InstructionSteps()
	<div class="max-w-2xl mx-auto">
		<div class="mt-4 mb-6">
			<h1 class="text-3xl font-bold text-primary mb-2">Edit Recipe</h1>
			<p class="text-secondary">Update your recipe details below</p>
		</div>
		<form
			action={ "/recipes/" + recipe.ID }
			method="POST"
			hx-put={ "/recipes/" + recipe.ID }
			hx-target="#main-content"
			hx-swap="innerHTML"
			class="space-y-6"
		>
			<input type="hidden" name="_method" value="PUT"/>
			<div class="mb-3">
				<label for="title" class="block text-sm font-medium text-primary mb-1">Recipe Title</label>
				<input
					type="text"
					id="title"
					name="title"
					required
					value={ recipe.Title }
					class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary"
					placeholder="Enter recipe title"
				/>
			</div>
			<div class="mb-3">
				<label for="description" class="block text-sm font-medium text-primary mb-1">Description</label>
				<textarea
					id="description"
					name="description"
					rows="2"
					class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary resize-none"
					placeholder="Brief description of your recipe"
				>{ recipe.Description }</textarea>
			</div>
			<div class="grid grid-cols-1 md:grid-cols-2 gap-3 md:gap-4 mb-3">
				<div>
					<label for="cookTime" class="block text-sm font-medium text-primary mb-1">Cook Time</label>
					<input
						type="text"
						id="cookTime"
						name="cookTime"
						value={ recipe.CookTime }
						class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary"
						placeholder="e.g., 30 minutes"
					/>
				</div>
				<div>
					<label for="servings" class="block text-sm font-medium text-primary mb-1">Servings</label>
					<input
						type="number"
						id="servings"
						name="servings"
						min="1"
						class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary"
						placeholder="4"
					/>
				</div>
			</div>
			<div class="mb-3">
				<label for="ingredients" class="block text-sm font-medium text-primary mb-1">Ingredients</label>
				<textarea
					id="ingredients"
					name="ingredients"
					rows="4"
					required
					class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary resize-none"
					placeholder="List ingredients, one per line:
2 cups flour
1 cup sugar
3 eggs"
				>{ recipe.Ingredients }</textarea>
			</div>
			<div class="mb-3">
				<label for="instructions" class="block text-sm font-medium text-primary mb-1">Instructions</label>
				<div id="instructions-steps"></div>
				<input type="hidden" id="instructions" name="instructions" value={ recipe.Instructions } required/>
			</div>
			<div class="flex gap-4 pt-3">
				<a
					href={ "/recipes/" + recipe.ID }
					class="flex-1 border border-border cursor-pointer text-primary px-7 py-3 rounded-lg font-medium transition-colors duration-200 text-center hover:bg-card focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2"
				>
					Cancel
				</a>
				<button
					type="submit"
					class="flex-1 bg-accent cursor-pointer text-light px-6 py-3 rounded-lg font-medium hover:bg-primary/90 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
				>
					Update Recipe
				</button>
			</div>
		</form>
	</div>
}

templ InstructionSteps() {
	<script>
	document.addEventListener('DOMContentLoaded', initializeInstructionSteps)
	document.body.addEventListener('htmx:afterSwap', initializeInstructionSteps)
	function initializeInstructionSteps() {
		// Only run on AddRecipe or EditRecipe pages by checking for the form
		const stepsContainer = document.getElementById('instructions-steps');
		const hiddenInput = document.getElementById('instructions');
		if (!stepsContainer || !hiddenInput) return;

		let steps = [];
		if (hiddenInput && hiddenInput.value.trim() !== '') {
			steps = hiddenInput.value.split('\n');
		} else {
			steps = [''];
		}

		function renderSteps() {
			stepsContainer.innerHTML = '';
			steps.forEach((step, idx) => {
				const wrapper = document.createElement('div');
				wrapper.className = 'flex items-center mb-2';

				const number = document.createElement('div');
				number.className = 'w-6 h-6 pb-0.5 bg-primary text-white rounded-full flex items-center justify-center text-sm font-medium mr-3 flex-shrink-0 leading-none';
				number.textContent = idx + 1;

				const input = document.createElement('input');
				input.type = 'text';
				input.className = 'flex-1 px-3 py-2 border border-border rounded focus:outline-none focus:ring-2 focus:ring-primary bg-card text-primary placeholder-secondary';
				input.placeholder = `Step ${idx + 1}`;
				input.value = step;
				input.dataset.idx = idx;

				input.addEventListener('keydown', function (e) {
					if (e.key === 'Enter') {
						e.preventDefault();
						if (idx === steps.length - 1 && input.value.trim() !== '') {
							steps.push('');
							renderSteps();
							setTimeout(() => {
								stepsContainer.querySelectorAll('input')[idx + 1].focus();
							}, 0);
						}
					}
					// Optional: handle "Backspace" to remove empty step
					if (e.key === 'Backspace' && input.value === '' && steps.length > 1) {
						steps.splice(idx, 1);
						renderSteps();
						setTimeout(() => {
							stepsContainer.querySelectorAll('input')[Math.max(0, idx - 1)].focus();
						}, 0);
					}
				});

				input.addEventListener('input', function (e) {
					steps[idx] = input.value;
					updateHiddenInput();
				});

				wrapper.appendChild(number);
				wrapper.appendChild(input);
				stepsContainer.appendChild(wrapper);
			});
			// Add info text below the last step input
			const info = document.createElement('div');
			info.className = 'text-xs text-primary/65 mt-1 ml-10';
			info.textContent = 'Press [enter] to add another step';
			stepsContainer.appendChild(info);
			updateHiddenInput();
		}

		function updateHiddenInput() {
			hiddenInput.value = steps.filter(s => s.trim() !== '').join('\n');
		}

		renderSteps();
	};
</script>
}

type RecipeDetail struct {
	ID           string
	Title        string
	Description  string
	CookTime     string
	Ingredients  string
	Instructions string
	CreatedAt    string
}

templ ShowRecipe(recipe RecipeDetail) {
	<div class="max-w-4xl mx-auto">
		<!-- Header -->
		<div class="mb-8">
			<div class="flex items-center justify-between mb-4">
				<a
					hx-get="/recipes"
					hx-target="#main-content"
					hx-swap="innerHTML"
					class="inline-flex items-center text-primary hover:text-primary/80 transition-colors cursor-pointer"
					hx-push-url="true"
				>
					<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
					</svg>
					Back to Recipes
				</a>
				<div class="flex gap-2">
					<a
						hx-get={ templ.SafeURL("/recipes/" + recipe.ID + "/edit") }
						hx-target="#main-content"
						hx-swap="innerHTML"
						class="cursor-pointer inline-flex items-center px-4 py-2 text-primary rounded-lg hover:text-accent transition-colors"
					>
						<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
							></path>
						</svg>
						Edit
					</a>
					<button
						hx-delete={ "/recipes/" + recipe.ID }
						hx-target="#main-content"
						hx-swap="innerHTML"
						hx-confirm="Are you sure you want to delete this recipe?"
						class="px-4 py-2 text-primary rounded-lg cursor-pointer hover:bg-red-700 hover:text-light transition-colors"
					>
						<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
							></path>
						</svg>
					</button>
				</div>
			</div>
			<h1 class="text-4xl font-bold text-primary mb-2">{ recipe.Title }</h1>
			<p class="text-xl text-secondary mb-4">{ recipe.Description }</p>
			if recipe.CookTime != "" {
				<div class="flex items-center text-accent">
					<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
						></path>
					</svg>
					<span class="font-medium">{ recipe.CookTime }</span>
				</div>
			}
		</div>
		<!-- Recipe Content -->
		<div class="grid grid-cols-1 lg:grid-cols-6 gap-6">
			<!-- Ingredients -->
			<div class="col-span-2 bg-card rounded-lg p-6 shadow-xs">
				<h2 class="text-2xl font-semibold text-primary mb-4 flex items-center">
					<svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
						></path>
					</svg>
					Ingredients
				</h2>
				<div class="space-y-2">
					for _, ingredient := range strings.Split(recipe.Ingredients, "\n") {
						if strings.TrimSpace(ingredient) != "" {
							<div class="flex items-start">
								<div class="w-2 h-2 bg-primary rounded-full mt-2 mr-3 flex-shrink-0"></div>
								<p class="text-primary">{ ingredient }</p>
							</div>
						}
					}
				</div>
			</div>
			<!-- Instructions -->
			<div class="col-span-4 bg-card rounded-lg p-6 shadow-xs">
				<h2 class="text-2xl font-semibold text-primary mb-4 flex items-center">
					<svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
						></path>
					</svg>
					Instructions
				</h2>
				<div class="space-y-4">
					for i, instruction := range strings.Split(recipe.Instructions, "\n") {
						if strings.TrimSpace(instruction) != "" {
							<div class="flex items-start">
								<div
									class="w-6 h-6 pb-0.5 bg-primary text-white rounded-full flex items-center justify-center text-sm font-medium mr-3 flex-shrink-0"
								>
									{ i + 1 }
								</div>
								<p class="text-primary">{ instruction }</p>
							</div>
						}
					}
				</div>
			</div>
		</div>
		<!-- Footer -->
		<div class="mt-8 pt-6 border-t border-border">
			<p class="text-sm text-secondary text-center">
				Created on { 
			func() string {
			parsed, err := time.Parse("2006-01-02T15:04:05Z", recipe.CreatedAt)
			if err != nil {
			log.Printf("failed to parse string")
			return recipe.CreatedAt
			}
			return parsed.Format("Jan 2, 2006")
			}() }
			</p>
		</div>
	</div>
}

// Success message template for HTMX responses
templ SuccessMessage(message string) {
	<div class="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50" id="success-message">
		<div class="flex items-center">
			<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
			</svg>
			{ message }
		</div>
	</div>
	<script>
	setTimeout(() => {
		const message = document.getElementById('success-message');
		if (message) {
			message.remove();
		}
	}, 3000);
</script>
}

// Loading indicator template
templ LoadingIndicator() {
	<div class="flex items-center justify-center py-8">
		<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
		<span class="ml-2 text-secondary">Loading...</span>
	</div>
}

// Error message template
templ ErrorMessage(message string) {
	<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
		<div class="flex items-center">
			<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
				></path>
			</svg>
			{ message }
		</div>
	</div>
}

templ CompleteProfileForm() {
	<div class="max-w-md mx-auto mt-24 p-8 bg-card rounded-lg shadow-lg text-center">
		<h1 class="text-3xl font-bold mb-6 text-primary">Complete Your Profile</h1>
		<p class="mb-6 text-secondary">We need your email to finish setting up your account.</p>
		<form action="/complete-profile" method="POST" class="space-y-6">
			<div class="mb-3">
				<label for="email" class="text-left block text-sm font-medium text-primary mb-1">Email Address</label>
				<input
					type="email"
					id="email"
					name="email"
					required
					class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary"
					placeholder="Enter your email"
				/>
			</div>
			<button type="submit" class="w-full bg-accent text-light px-6 py-3 rounded-lg font-medium hover:bg-primary/90 transition-colors duration-200">Continue</button>
		</form>
	</div>
}

templ CompleteProfileFormWithError(errorMsg string) {
	<div class="max-w-md mx-auto mt-24 p-8 bg-card rounded-lg shadow-lg text-center">
		<h1 class="text-3xl font-bold mb-6 text-primary">Complete Your Profile</h1>
		<p class="mb-6 text-secondary">We need your email to finish setting up your account.</p>
		<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
			{ errorMsg }
		</div>
		<form action="/complete-profile" method="POST" class="space-y-6">
			<div class="mb-3">
				<label for="email" class="block text-sm font-medium text-primary mb-1">Email Address</label>
				<input
					type="email"
					id="email"
					name="email"
					required
					class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-card text-primary placeholder-secondary"
					placeholder="Enter your email"
				/>
			</div>
			<button type="submit" class="w-full bg-accent text-light px-6 py-3 rounded-lg font-medium hover:bg-primary/90 transition-colors duration-200">Continue</button>
		</form>
	</div>
}
